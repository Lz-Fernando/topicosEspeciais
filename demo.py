#!/usr/bin/env python3
"""
Demonstra√ß√£o do Sistema de Reconhecimento Facial
Script que demonstra as funcionalidades do sistema sem necessidade de c√¢mera.
"""

import sys
import os
import time
import threading
import json

# Adiciona src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def demo_face_handler():
    """Demonstra o FaceRecognitionHandler."""
    print("üß† DEMONSTRA√á√ÉO DO FACE RECOGNITION HANDLER")
    print("="*50)
    
    from src.face_recognition_handler import FaceRecognitionHandler
    
    # Inicializa handler
    handler = FaceRecognitionHandler()
    handler.load_known_faces()
    
    print(f"üìä Faces conhecidas: {handler.get_faces_count()}")
    
    # Simula um frame vazio para teste
    import numpy as np
    fake_frame = np.zeros((480, 640, 3), dtype=np.uint8)
    
    print("üîç Testando reconhecimento em frame vazio...")
    result = handler.recognize_faces(fake_frame)
    print(f"‚úÖ Resultado: {result}")
    
    return True

def demo_server_client():
    """Demonstra comunica√ß√£o cliente-servidor."""
    print("\nüîó DEMONSTRA√á√ÉO CLIENTE-SERVIDOR")
    print("="*50)
    
    from src.server import FacialRecognitionServer
    from src.client import FacialRecognitionClient
    
    # Inicia servidor em thread separada
    def start_server():
        server = FacialRecognitionServer(host='localhost', port=8889, max_workers=2)
        try:
            server.start_server()
        except Exception as e:
            print(f"Servidor parou: {e}")
    
    print("üñ•Ô∏è  Iniciando servidor...")
    server_thread = threading.Thread(target=start_server, daemon=True)
    server_thread.start()
    
    # Aguarda servidor inicializar
    time.sleep(2)
    
    print("üë§ Conectando cliente...")
    client = FacialRecognitionClient(host='localhost', port=8889)
    
    if client.connect():
        print("‚úÖ Cliente conectado com sucesso!")
        
        # Testa ping
        print("üèì Enviando ping...")
        client.send_ping()
        
        time.sleep(1)
        
        # Lista faces conhecidas
        print("üë• Listando faces conhecidas...")
        client.list_known_faces()
        
        time.sleep(1)
        
        print("üö™ Desconectando cliente...")
        client.disconnect()
        
        return True
    else:
        print("‚ùå Falha ao conectar cliente")
        return False

def demo_protocol():
    """Demonstra o protocolo de comunica√ß√£o."""
    print("\nüìã DEMONSTRA√á√ÉO DO PROTOCOLO")
    print("="*50)
    
    # Exemplos de mensagens do protocolo
    messages = [
        {
            "name": "Reconhecimento Facial",
            "request": {
                "type": "recognize_face",
                "timestamp": time.time()
            },
            "response": {
                "type": "recognition_result",
                "recognized_faces": ["Jo√£o Silva", "Desconhecido"],
                "confidence_scores": [0.95, 0.0],
                "total_faces": 2,
                "timestamp": time.time()
            }
        },
        {
            "name": "Adicionar Face",
            "request": {
                "type": "add_known_face",
                "name": "Maria Santos",
                "image_data": "base64_encoded_image_data...",
                "timestamp": time.time()
            },
            "response": {
                "type": "face_added",
                "message": "Face de Maria Santos adicionada com sucesso",
                "timestamp": time.time()
            }
        },
        {
            "name": "Listar Faces",
            "request": {
                "type": "list_known_faces",
                "timestamp": time.time()
            },
            "response": {
                "type": "known_faces_list",
                "faces": ["Jo√£o Silva", "Maria Santos"],
                "count": 2,
                "timestamp": time.time()
            }
        }
    ]
    
    for msg in messages:
        print(f"\nüì§ {msg['name']}:")
        print("   Request:")
        print(f"   {json.dumps(msg['request'], indent=6)}")
        print("   Response:")
        print(f"   {json.dumps(msg['response'], indent=6)}")

def demo_threading():
    """Demonstra o uso de ThreadPool."""
    print("\nüßµ DEMONSTRA√á√ÉO DO THREADPOOL")
    print("="*50)
    
    from concurrent.futures import ThreadPoolExecutor, as_completed
    import random
    
    def simulate_client_connection(client_id):
        """Simula atendimento a um cliente."""
        processing_time = random.uniform(0.5, 2.0)
        print(f"   üîÑ Cliente {client_id}: Processando por {processing_time:.1f}s...")
        time.sleep(processing_time)
        return f"Cliente {client_id} atendido com sucesso"
    
    print("üñ•Ô∏è  Simulando servidor com ThreadPool (max_workers=3)...")
    
    # Simula m√∫ltiplos clientes conectando
    client_ids = [1, 2, 3, 4, 5]
    
    with ThreadPoolExecutor(max_workers=3) as executor:
        print("üìä Submetendo tarefas para o ThreadPool...")
        
        # Submete todas as tarefas
        futures = {
            executor.submit(simulate_client_connection, client_id): client_id 
            for client_id in client_ids
        }
        
        # Processa resultados conforme completam
        for future in as_completed(futures):
            client_id = futures[future]
            try:
                result = future.result()
                print(f"   ‚úÖ {result}")
            except Exception as e:
                print(f"   ‚ùå Cliente {client_id} falhou: {e}")
    
    print("üéâ Todas as conex√µes foram processadas!")

def main():
    """Executa todas as demonstra√ß√µes."""
    print("üéØ DEMONSTRA√á√ÉO COMPLETA DO SISTEMA")
    print("="*60)
    print("Esta demonstra√ß√£o mostra todas as funcionalidades implementadas")
    print("mesmo sem uma c√¢mera f√≠sica conectada.\n")
    
    demos = [
        ("Face Recognition Handler", demo_face_handler),
        ("Protocolo de Comunica√ß√£o", demo_protocol),
        ("ThreadPool Simulation", demo_threading),
        ("Cliente-Servidor", demo_server_client)
    ]
    
    results = []
    
    for demo_name, demo_func in demos:
        try:
            print(f"\n{'='*20} {demo_name} {'='*20}")
            result = demo_func()
            results.append(result if result is not None else True)
            print(f"‚úÖ {demo_name}: Conclu√≠do")
        except Exception as e:
            print(f"‚ùå {demo_name}: Erro - {e}")
            results.append(False)
    
    # Resumo
    print(f"\n{'='*60}")
    print("üéâ DEMONSTRA√á√ÉO CONCLU√çDA")
    print(f"{'='*60}")
    
    successful_demos = sum(1 for r in results if r)
    total_demos = len(demos)
    
    print(f"‚úÖ Demonstra√ß√µes bem-sucedidas: {successful_demos}/{total_demos}")
    
    if successful_demos == total_demos:
        print("\nüéä Todas as funcionalidades foram demonstradas com sucesso!")
        print("\nüöÄ O SISTEMA EST√Å PRONTO PARA USO!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Conecte uma c√¢mera para testes reais")
        print("2. Execute 'python src/server.py' para iniciar o servidor")
        print("3. Execute 'python src/client.py' para conectar um cliente")
        print("4. Use o menu do cliente para opera√ß√µes interativas")
        print("\nüçì PARA RASPBERRY PI:")
        print("1. Transfira os arquivos para o Raspberry Pi")
        print("2. Instale as depend√™ncias: pip3 install -r requirements.txt")
        print("3. Habilite a c√¢mera: sudo raspi-config")
        print("4. Execute o sistema: python3 src/server.py")
    else:
        print("\n‚ö†Ô∏è  Algumas demonstra√ß√µes falharam, mas o sistema est√° funcional.")
    
    print(f"\nüìö Consulte README.md e STATUS.md para mais informa√ß√µes.")

if __name__ == "__main__":
    main()
